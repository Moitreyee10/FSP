In [1]:
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
%matplotlib inline
import seaborn as sns
In [2]:
dataset = pd.read_csv('Breast_cancer.csv')
In [3]:
print(dataset.shape)
dataset.head()
(683, 11)
Out[3]:
       Sample code number	Clump Thickness	Uniformity of Cell Size	Uniformity of Cell Shape	Marginal Adhesion	Single Epithelial Cell Size	Bare Nuclei	Bland Chromatin	Normal Nucleoli	Mitoses	Class
0	1000025	                5	           1	                 1	                         1	                 2	                        1	        3	        1	         1	2
1	1002945	                5	           4	                 4	                         5	                 7	                        10	        3	        2	         1	2
2	1015425	                3	           1	                 1	                         1	                 2	                        2	        3	        1	         1	2
3	1016277	                6	           8	                 8	                         1	                 3	                        4	        3	        7	         1	2
4	1017023	                4	           1	                 1	                         3	                 2	                        1	        3	        1	         1	2
In [4]:
dataset.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 683 entries, 0 to 682
Data columns (total 11 columns):
 #   Column                       Non-Null Count  Dtype
---  ------                       --------------  -----
 0   Sample code number           683 non-null    int64
 1   Clump Thickness              683 non-null    int64
 2   Uniformity of Cell Size      683 non-null    int64
 3   Uniformity of Cell Shape     683 non-null    int64
 4   Marginal Adhesion            683 non-null    int64
 5   Single Epithelial Cell Size  683 non-null    int64
 6   Bare Nuclei                  683 non-null    int64
 7   Bland Chromatin              683 non-null    int64
 8   Normal Nucleoli              683 non-null    int64
 9   Mitoses                      683 non-null    int64
 10  Class                        683 non-null    int64
dtypes: int64(11)
memory usage: 58.8 KB
In [5]:
#Describe a data frame in Python - summary statistics of all the variables
dataset.describe()
Out[5]:
Sample code number	Clump Thickness	Uniformity of Cell Size	Uniformity of Cell Shape	Marginal Adhesion	Single Epithelial Cell Size	Bare Nuclei	Bland Chromatin	Normal Nucleoli	Mitoses	Class
count	6.830000e+02	683.000000	683.000000	683.000000	683.000000	683.000000	683.000000	683.000000	683.000000	683.000000	683.000000
mean	1.076720e+06	4.442167	3.150805	3.215227	2.830161	3.234261	3.544656	3.445095	2.869693	1.603221	2.699854
std	6.206440e+05	2.820761	3.065145	2.988581	2.864562	2.223085	3.643857	2.449697	3.052666	1.732674	0.954592
min	6.337500e+04	1.000000	1.000000	1.000000	1.000000	1.000000	1.000000	1.000000	1.000000	1.000000	2.000000
25%	8.776170e+05	2.000000	1.000000	1.000000	1.000000	2.000000	1.000000	2.000000	1.000000	1.000000	2.000000
50%	1.171795e+06	4.000000	1.000000	1.000000	1.000000	2.000000	1.000000	3.000000	1.000000	1.000000	2.000000
75%	1.238705e+06	6.000000	5.000000	5.000000	4.000000	4.000000	6.000000	5.000000	4.000000	1.000000	4.000000
max	1.345435e+07	10.000000	10.000000	10.000000	10.000000	10.000000	10.000000	10.000000	10.000000	10.000000	4.000000
In [6]:
sns.heatmap(dataset.isnull(), yticklabels = False, cbar = True, cmap = 'viridis')
# no null values in the entire dataset
Out[6]:
<AxesSubplot:>

In [7]:
plt.figure(figsize = (10, 5))
sns.heatmap(dataset.corr(), annot = True, annot_kws={"size":10})
Out[7]:
<AxesSubplot:>

In [8]:
sns.set_style('whitegrid')
sns.countplot(x ='Class', data = dataset, palette ='bright')
# 2 - BENIGN, 4 - MALIGNANT
Out[8]:
<AxesSubplot:xlabel='Class', ylabel='count'>

In [9]:
sns.countplot(x = 'Class', hue = 'Clump Thickness', data = dataset, palette = 'rainbow')
# 2(BENIGN) - grouped in mono-layers, 4(MALIGNANT) - grouped in multi-layer.
Out[9]:
<AxesSubplot:xlabel='Class', ylabel='count'>

In [10]:
sns.set_style('whitegrid')
sns.countplot(x = 'Class', hue = 'Mitoses', data = dataset, palette = 'rainbow')
# 2(BENIGN) - small value(1,2), 4(MALIGNANT) - large value(10,8,...)
Out[10]:
<AxesSubplot:xlabel='Class', ylabel='count'>

In [11]:
# Drop a column
dataset.drop('Sample code number', inplace = True, axis = 1)

print(dataset.shape)
dataset.head()
(683, 10)
Out[11]:
Clump Thickness	Uniformity of Cell Size	Uniformity of Cell Shape	Marginal Adhesion	Single Epithelial Cell Size	Bare Nuclei	Bland Chromatin	Normal      Nucleoli	   Mitoses	Class
0	        5	                1	                         1	                1	2	                  1	                           3	         1             1           2                                       	                                         
1	        5	                4	                         4	                5	7	                 10	                           3	         2             1           2                                     	                                         
2	        3	                1	                         1	                1	2	                  2	                           3	         1             1           2                                         	                                         
3	        6	                8	                         8	                1	3	                  4	                           3	         7             1           2                                         	                                         
4	        4	                1	                         1	                3	2	                  1	                           3	         1             1       	   2                                	                                         
In [12]:
dataset.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 683 entries, 0 to 682
Data columns (total 10 columns):
 #   Column                       Non-Null Count  Dtype
---  ------                       --------------  -----
 0   Clump Thickness              683 non-null    int64
 1   Uniformity of Cell Size      683 non-null    int64
 2   Uniformity of Cell Shape     683 non-null    int64
 3   Marginal Adhesion            683 non-null    int64
 4   Single Epithelial Cell Size  683 non-null    int64
 5   Bare Nuclei                  683 non-null    int64
 6   Bland Chromatin              683 non-null    int64
 7   Normal Nucleoli              683 non-null    int64
 8   Mitoses                      683 non-null    int64
 9   Class                        683 non-null    int64
dtypes: int64(10)
memory usage: 53.5 KB
In [ ]:
#Using KNN








import pandas as pd



import numpy as np



import matplotlib.pyplot as plt



import seaborn as sns



from sklearn import preprocessing



from sklearn.preprocessing import Normalizer



from sklearn.model_selection import train_test_split



from sklearn.model_selection import GridSearchCV



from sklearn.neighbors import KNeighborsClassifier



from sklearn.metrics import classification_report, confusion_matrix, accuracy_score






data = pd.read_csv('Breast_cancer.csv')






print(“Checking missing values\n”)



print(data.isnull().sum())






df = pd.DataFrame(data)



print(“\n”)






print(“Shape of data\n”,df.shape)






print(“\n”)



print(“Counts in each class\n”)



count = df[‘diagnosis’].value_counts()



print(count)






plt.rcParams[“figure.figsize”] = [9,6]



sns.countplot(x=’diagnosis’,hue=”diagnosis”, data=df)



plt.show()






X = df.iloc[:,2:32]



y = df.iloc[:,1]






X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)






print(“\n”)



print(“Training data set\n”,X_train,”\n”,y_train)



print(“\n”)



print(“Testing data set\n”,X_test)






#buildingmodel



knn = KNeighborsClassifier()



#create a dictionary of all values we want to test for n_neighbors



params_knn = {‘n_neighbors’: np.arange(1, 25)}



#use gridsearch to test all values for n_neighbors



knn_gs = GridSearchCV(knn, params_knn, cv=5)



#fit model to training data



knn_gs.fit(X_train, y_train)



knn_best = knn_gs.best_estimator_



y_pred = knn_best.predict(X_test)






print(“Confusion Matrix\n”,confusion_matrix(y_test,y_pred))



print(“\n”)



print(“Classification Report\n”,classification_report(y_test,y_pred))



print(“\n”)



print(“Accuracy : “,accuracy_score(y_test,y_pred)*100)












In this phase of experiment, it has approx 96.67 test accuracy and a approx 97.13 CV accuracy.






Model        CV Accuracy        Test Accuracy        F1-Score



Linear SVM                          96.72193877551021%                        96.19047619047619%                        0.96



Linear Regression                    83.04080172481487%                        83.15260747045592%                        0.97



Logistic Regression                  96.72193877551021%                        96.66666666666667%                        0.97



KNN                           96.49122807017544%                  96.49122807017544%                   0.96






The results have shown that even with 0 values as missing values, the KNN had the highest CV accuracy and test accuracy.
